wt.values <- rnorm(5)
data.matrix[i,] <- c(wt.values)
}
data.matrix <- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 20, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
hist(data.matrix)
data.matrix <- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 1000, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
wt.values <- rnorm(n = 100, mean = 0, sd = 5)
data.matrix <- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 100, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
hist(data.matrix)
data.matrix <- matrix(nrow=20, ncol=50)
View(data.matrix)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
View(data.matrix)
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
x <- rnorm(100, mean = 0, sd = 5)
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 100, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
wt.values <- rnorm(n = 20, mean = 0, sd = 5)
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 20, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
print(wt.values)
wt.values <- rnorm(n = 1000, mean = 0, sd = 5)
print(wt.values)
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 1000, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 50, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:100, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 50, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:100, sep=""))
colnames(data.matrix) <- c(
paste("col", 1:100, sep=""))
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:100) {
wt.values <- rnorm(n = 50, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
x<- matrix(nrow=20, ncol=50)
colnames(data.matrix) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
wt.values <- rnorm(n = 50, mean = 0, sd = 5)
data.matrix[i,] <- c(wt.values)
}
View(data.matrix)
hist(x)
View(data.matrix)
x<- matrix(nrow=20, ncol=50)
colnames(x) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
wt.values <- rnorm(n = 50, mean = 0, sd = 5)
x[i,] <- c(wt.values)
}
hist(x)
x1<- matrix(nrow=20, ncol=50)
for (i in 1:20) {
wt.values <- rnorm(n = 50, mean = 5, sd = 5)
x[i,] <- c(wt.values)
}
x2<- matrix(nrow=20, ncol=50)
for (i in 1:20) {
wt.values <- rnorm(n = 50, mean = 10, sd = 5)
x[i,] <- c(wt.values)
}
x <- rbind(x, x1, x2)
View(x)
View(x)
x<- matrix(nrow=20, ncol=50)
colnames(x) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 0, sd = 5)
x[i,] <- c(col.values)
}
View(x)
x<- matrix(nrow=20, ncol=50)
colnames(x) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 0, sd = 5)
x[i,] <- c(col.values)
}
x1<- matrix(nrow=20, ncol=50)
colnames(x1) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 5, sd = 5)
x1[i,] <- c(col.values)
}
x2<- matrix(nrow=20, ncol=50)
colnames(x2) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 10, sd = 5)
x2[i,] <- c(col.values)
}
x <- rbind(x, x1, x2)
View(x)
hist(x)
dim(x)
head(x)
pca <- prcomp(t(x), scale=TRUE)
View(pca)
## plot pc1 and pc2
plot(pca$x[,1], pca$x[,2])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## now make a fancy looking plot that shows the PCs and the variation:
library(ggplot2)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
pca <- prcomp(x, scale=TRUE)
## plot pc1 and pc2
plot(pca$x[,1], pca$x[,2])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## now make a fancy looking plot that shows the PCs and the variation:
library(ggplot2)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
summary(pca)
x<- matrix(nrow=20, ncol=50)
colnames(x) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 0, sd = 1)
x[i,] <- c(col.values)
}
x1<- matrix(nrow=20, ncol=50)
colnames(x1) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 5, sd = 1)
x1[i,] <- c(col.values)
}
x2<- matrix(nrow=20, ncol=50)
colnames(x2) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 10, sd = 1)
x2[i,] <- c(col.values)
}
x <- rbind(x, x1, x2)
pca <- prcomp(x, scale=TRUE)
summary(pca)
str(pca)
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("vqv/ggbiplot")
plot(pca)
library(reshape2)
library(ggplot2)
scores <- data.frame(sample.groups, pca$x[,1:3])
pca$x
scores <- data.frame(x, pca$x[,1:3])
pc1.2 <- qplot(x=PC1, y=PC2, data=x, colour=factor(x)) +
theme(legend.position="none")
pc1.2 <- qplot(x=PC1, y=PC2, data=scores, colour=factor(x)) +
theme(legend.position="none")
pc1.2
pc1.2 <- qplot(x=PC1, y=PC2, data=scores, theme(legend.position="none")
)
pc1.2 <- qplot(x=PC1, y=PC2, data=scores)
pc1.2
install.packages("ggbiplot")
install.packages(c("backports", "broom", "car", "caret", "checkmate", "crosstalk", "date", "dplyr", "fBasics", "forcats", "foreach", "fs", "GGally", "glue", "gplots", "gss", "gtools", "h2o", "Hmisc", "knitr", "lava", "lifecycle", "lme4", "lubridate", "manipulateWidget", "mclust", "mime", "ModelMetrics", "modelr", "multcomp", "mvtnorm", "nloptr", "pbkrtest", "pROC", "processx", "ps", "quantreg", "recipes", "reshape2", "rgl", "rlang", "shiny", "sp", "SQUAREM", "stringi", "survey", "tibble", "tidyselect", "tinytex", "vctrs", "xgboost", "xml2"))
pca <- princomp(x, scale=TRUE)
plot(pca$scores, pch = 16, col = Species)
plot(pca$scores, pch = 16)
plot(pca$scores )
plot(pca$scores, pch =1 )
plot(pca$scores, pch =1000 )
plot(pca$scores, pch =16 )
plot(pca$scores, pch =8 )
x <- X$Class
x <- x$Class
x <- x$Class %<% Class = 1
x$Class <- x$Class %<% Class = 1
x$Class <- c('1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1',)
x<- matrix(nrow=20, ncol=50)
colnames(x) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 0, sd = 1)
x[i,] <- c(col.values)
}
x$Class <- c('1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1',)
View(x)
x$Class <- c('1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1')
View(x)
x<- matrix(nrow=20, ncol=50)
colnames(x) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 0, sd = 1)
x[i,] <- c(col.values)
}
plot(x1)
require(Matrix)
library(e1071)
library(naivebayes)
dataFile <- file("articles.train", "r")
setwd("~/Courses/MSBA/Spring_Sem/IDS 575/Assignment2_Updated")
dataFile <- file("articles.train", "r")
dataLines <- readLines(dataFile)
m <- length(dataLines)
close(dataFile)
dataFile
dataFile
dataTokens = strsplit(dataLines, "[: ]")
View(dataTokens)
# Extract every first token from each line as a vector of numbers, which is the class label.
Ytrain = sapply(dataTokens, function(example) {as.numeric(example[1])})
# Extract the rest of tokens from each line as a list of matrices (one matrix for each line)
# where each row consists of two columns: (feature number, its occurrences)
X_list = lapply(dataTokens, function(example) {n = length(example) - 1; matrix(as.numeric(example[2:(n+1)]), ncol=2, byrow=T)})
View(X_list)
# Add one column that indicates the example number at the left
X_list = mapply(cbind, x=1:length(X_list), y=X_list)
View(X_list)
View(X_list)
X_list[1]
# Merge a list of different examples vertcially into a matrix
X_data = do.call('rbind', X_list)
View(X_data)
# Get a sparse data matrix X (rows: training exmaples, columns: # of occurrences for each of features)
Xtrain = sparseMatrix(x=X_data[,3], i=X_data[,1], j=X_data[,2]) #Frequency, which article, Word
Y1 <- ifelse(Ytrain==1, 1,-1)
#summary(Y1)
Y2 <- ifelse(Ytrain==2, 1,-1)
Y3 <- ifelse(Ytrain==3, 1,-1)
Y4 <- ifelse(Ytrain==4, 1,-1)
Ytrain <- as.factor(Ytrain)
View(X_list)
hist(X_data)
View(X_data)
View(X_list)
str(X_list)
X_list[0]
X_list[1]
X_list[1]
dataTokens
# Extract the rest of tokens from each line as a list of matrices (one matrix for each line)
# where each row consists of two columns: (feature number, its occurrences)
X_list = lapply(dataTokens, function(example) {n = length(example) - 1; matrix(as.numeric(example[2:(n+1)]), ncol=2, byrow=T)})
X_list
# Add one column that indicates the example number at the left
X_list = mapply(cbind, x=1:length(X_list), y=X_list)
X_list[1]
# Merge a list of different examples vertcially into a matrix
X_data = do.call('rbind', X_list)
X_data
# Get a sparse data matrix X (rows: training exmaples, columns: # of occurrences for each of features)
Xtrain = sparseMatrix(x=X_data[,3], i=X_data[,1], j=X_data[,2]) #Frequency, which article, Word
Y1 <- ifelse(Ytrain==1, 1,-1)
#summary(Y1)
Y2 <- ifelse(Ytrain==2, 1,-1)
Y3 <- ifelse(Ytrain==3, 1,-1)
Y4 <- ifelse(Ytrain==4, 1,-1)
Ytrain <- as.factor(Ytrain)
View(X_data)
View(Xtrain)
NB <- naiveBayes(Xtrain, Y1)
X_data
NB <- naiveBayes(X_data, Y1)
# Add one column that indicates the example number at the left
X_list = mapply(cbind, x=1:length(X_list), y=X_list)
X_list
Ytrain
X_list
# Add one column that indicates the example number at the left
X_list = mapply(cbind, x=1:length(X_list), y=X_list)
X_list
require(Matrix)
library(e1071)
library(naivebayes)
dataFile <- file("articles.train", "r")
dataLines <- readLines(dataFile)
m <- length(dataLines)
close(dataFile)
dataTokens = strsplit(dataLines, "[: ]")
# Extract every first token from each line as a vector of numbers, which is the class label.
Ytrain = sapply(dataTokens, function(example) {as.numeric(example[1])})
# Extract the rest of tokens from each line as a list of matrices (one matrix for each line)
# where each row consists of two columns: (feature number, its occurrences)
X_list = lapply(dataTokens, function(example) {n = length(example) - 1; matrix(as.numeric(example[2:(n+1)]), ncol=2, byrow=T)})
# Add one column that indicates the example number at the left
X_list = mapply(cbind, x=1:length(X_list), y=X_list)
X_list
NB <- multinomial_naive_bayes(Xtrain, Y1)
Y1 <- ifelse(Ytrain==1, 1,-1)
NB <- multinomial_naive_bayes(Xtrain, Y1)
Ytrain <- as.factor(Ytrain)
NB <- multinomial_naive_bayes(Xtrain, Y1)
NB <- multinomial_naive_bayes(Xtrain, Ytrain)
require(Matrix)
library(e1071)
library(naivebayes)
dataFile <- file("articles.train", "r")
dataLines <- readLines(dataFile)
m <- length(dataLines)
close(dataFile)
dataTokens = strsplit(dataLines, "[: ]")
# Extract every first token from each line as a vector of numbers, which is the class label.
Ytrain = sapply(dataTokens, function(example) {as.numeric(example[1])})
# Extract the rest of tokens from each line as a list of matrices (one matrix for each line)
# where each row consists of two columns: (feature number, its occurrences)
X_list = lapply(dataTokens, function(example) {n = length(example) - 1; matrix(as.numeric(example[2:(n+1)]), ncol=2, byrow=T)})
# Add one column that indicates the example number at the left
X_list = mapply(cbind, x=1:length(X_list), y=X_list)
# Merge a list of different examples vertcially into a matrix
X_data = do.call('rbind', X_list)
# Get a sparse data matrix X (rows: training exmaples, columns: # of occurrences for each of features)
Xtrain = sparseMatrix(x=X_data[,3], i=X_data[,1], j=X_data[,2]) #Frequency, which article, Word
Y1 <- ifelse(Ytrain==1, 1,-1)
#summary(Y1)
Y2 <- ifelse(Ytrain==2, 1,-1)
Y3 <- ifelse(Ytrain==3, 1,-1)
Y4 <- ifelse(Ytrain==4, 1,-1)
Ytrain <- as.factor(Ytrain)
NB <- multinomial_naive_bayes(Xtrain, Ytrain)
View(Xtrain)
X_data
cY <- Ytrain
Ysparse <- as(as.matrix(cY), "dgCMatrix")
Ysparse1 <- as(cbind(as.matrix(Y1),Xtrain), "dgCMatrix")
Ysparse2 <- as(cbind(as.matrix(Y2),Xtrain), "dgCMatrix")
Ysparse3 <- as(cbind(as.matrix(Y3),Xtrain), "dgCMatrix")
Ysparse4 <- as(cbind(as.matrix(Y4),Xtrain), "dgCMatrix")
sparse_combined <- cbind(Ysparse,Xtrain)
sparse_combined
X_data
require(Matrix)
library(e1071)
library(naivebayes)
dataFile <- file("articles.train", "r")
dataLines <- readLines(dataFile)
m <- length(dataLines)
close(dataFile)
dataTokens = strsplit(dataLines, "[: ]")
# Extract every first token from each line as a vector of numbers, which is the class label.
Ytrain = sapply(dataTokens, function(example) {as.numeric(example[1])})
# Extract the rest of tokens from each line as a list of matrices (one matrix for each line)
# where each row consists of two columns: (feature number, its occurrences)
X_list = lapply(dataTokens, function(example) {n = length(example) - 1; matrix(as.numeric(example[2:(n+1)]), ncol=2, byrow=T)})
# Add one column that indicates the example number at the left
X_list = mapply(cbind, x=1:length(X_list), y=X_list)
X_list[1]
# Merge a list of different examples vertcially into a matrix
X_data = do.call('rbind', X_list)
X_data
View(X_list)
# Merge a list of different examples vertcially into a matrix
X_data = do.call('rbind', X_list)
View(X_data)
# Get a sparse data matrix X (rows: training exmaples, columns: # of occurrences for each of features)
Xtrain = sparseMatrix(x=X_data[,3], i=X_data[,1], j=X_data[,2]) #Frequency, which article, Word
View(Xtrain)
Xtrain[1]
View(Xtrain)
View(Xtrain)
Xtrain[i]
Xtrain[[i]]
View(Xtrain)
Xtrain
View(X_data)
NB <- multinomial_naive_bayes(Xtrain, Ytrain)
Ytrain <- as.factor(Ytrain)
str(X_list)
NB <- multinomial_naive_bayes(Xtrain, Ytrain)
NB <- naive_bayes(Xtrain, Ytrain)
library(Matrix)
NB <- multinomial_naive_bayes(Xtrain, Ytrain)
cols <- 10 ; rows <- 100
M <- matrix(sample(0:5, rows * cols, TRUE, prob = c(0.95, rep(0.01, 5))), nrow = rows, ncol = cols)
View(M)
M_sparse <- Matrix(M, sparse = TRUE)
class(M_sparse)
class(Xtrain)
View(M_sparse)
View(M_sparse)
y <- factor(sample(paste0("class", LETTERS[1:2]), rows, TRUE, prob = c(0.3,0.7)))
colnames(M) <- paste0("V", seq_len(ncol(M)))
View(M)
View(M)
M_sparse <- Matrix(M, sparse = TRUE)
View(M_sparse)
mnb <- multinomial_naive_bayes(x = M, y = y)
View(mnb)
Ytrain
View(Ytrain)
NB <- multinomial_naive_bayes(Xtrain, Ytrain)
set.seed(100)
# create example data
x1 <- matrix( rnorm( 1000 ),ncol=50)
x2 <- matrix( rnorm( 1000 ),ncol=50) + 2
x3 <- matrix( rnorm( 1000 ),ncol=50) + 4
x <- rbind( x1, x2, x3 )
x<- matrix(nrow=20, ncol=50)
colnames(x) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 0, sd = 1)
x[i,] <- c(col.values)
}
x1<- matrix(nrow=20, ncol=50)
colnames(x1) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 5, sd = 1)
x1[i,] <- c(col.values)
}
x2<- matrix(nrow=20, ncol=50)
colnames(x2) <- c(
paste("col", 1:50, sep=""))
for (i in 1:20) {
col.values <- rnorm(n = 50, mean = 10, sd = 1)
x2[i,] <- c(col.values)
}
x <- rbind(x, x1, x2)
pca <- princomp(x, scale=TRUE)
pca$x
summary(pca)
str(pca)
library(reshape2)
library(ggplot2)
scores <- data.frame(x, pca$x[,1:3])
pc1.2 <- qplot(x=PC1, y=PC2, data=scores)
plot(pca$scores, pch =8 )
pca
